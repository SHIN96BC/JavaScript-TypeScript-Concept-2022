// # 자바스크립트는 런타임과 컴파일 타임이라고 하는 개념이 없습니다.

// # 타입스크립트는 런타임과 컴파일타임이 명확하게 구분이 됩니다.
//  하지만 타입스크립트가 모든 컴파일 오류를 온전하게 커버하지 못하는 상황도 
//  있습니다. 그 이유는 타입스크립트가 실행되려면 자바스크립트로 변환되어야
//  하는 태생적 한계가 있기 때문입니다. 그래서 컴파일 타임에 체크를 한다고
//  하더라도 그 체크가 런타임까지 온전하게 커버되지 못하는 상황들이 생기는 것입니다.
//  그러므로 개발자들은 이 문제를 충분히 인지하고 그것을 대비한 방어코드를
//  작성하는 습관을 들일 수 있어야 합니다.

// #예시
function add(x: number, y: number): number {
    return x + y;
}

add(10, 20);

// 이런식으로 컴파일 타임에 타입들을 체크해주면 만약 number 타입을 지정해둔
// 곳에 문자열을 넣으면 에러가 발생합니다. 그러나 중요한 문제는 이 코드가
// 자바스크립트로 바뀌면서 적어둔 타입들이 전부 사라지게 됩니다.
// 이것이 근본적인 이유입니다. 자바스크립트 코드로 변환이 되어서 브라우저에서
// 실행이 되므로 런타임에 질못된 타입의 데이터가 들어갈 수 있기 때문입니다.

// ( 다른 타입의 데이터가 어떻게 들어가지? 라는 생각이 들 수 있으므로 
//   그런상황을 한번 만들어 보면서 실험해봅시다. )

// # 런타임에 잘못된 타입이 들어가는 예시
//  만약에 아래의 add2 함수의 인자값인 10 과 20 이 서버로부터 받은
//  데이터를 사용한다고 가정을 합니다.

function add2(x: number, y: number): number {
    return x + y;
}

// 타이핑을 해줍니다.
type ObjType = {
    x: number;
    y: number;
}

//  서버로부터 넘어오는 데이터는 분명 JSON 데이터이기 때문에 JSON 데이터를
//  만들어 줍니다.( 에러를 발생시키기 위해서  x 에 number 타입을 지정했지만 
//  실제 json 데이터에는 문자열을 넣어줍니다. )
const json = `{ "x": "abc", "y": 20 }`;

// json 데이터를 타입스크립트에서 사용하기 위해서 Object 로 만들어줍니다.
// 그리고 obj 의 타입을 ObjType 로 주고 타입 accession 을 해주기 위해서
// as ObjType 이렇게 적어줍니다. 의미는 ObjType 타입으로 반환한다는 의미입니다.
const obj: ObjType = JSON.parse(json) as ObjType;

add2(obj.x, obj.y);

// 자 이렇게 코드를 적으면 분명 런타임에 타입 에러가 발생할텐데 타입스크립트가
// 컴파일 타임에 도와줄 수 있는 것은 아무것도 없습니다.( 컴파일 타임에는 에러 X )
// 그래서 항상 방어코드를 많이 작성해야 합니다.