// # 프로토콜은 규약이라는 의미입니다.

// # 물리적인 통신 관점에서의 프로토콜
//  웹의 대표적인 프로토콜에는 Http 프로토콜( 비동기 )과,
//  WebSocket 프로토콜( 동기 ) 등이 있습니다.
//  WebSocket 은 채팅이나, push 시스템등 기타 다양한 이유로 사용합니다.


// # 소프트웨어 개발 방법론적인 관점에서의 프로토콜
//  소프트웨어 개발 방법론적인 관점에서의 프로토콜이란 굉장히 광범위한 개념입니다.
//  예를 들어서 Class 자체도 프로토콜입니다. 클래스도 개발자가 이런 규격으로
//  디자인하고, 이렇게 동작되게끔 만들었으니, 이렇게 사용해주세요라고 규약을 정해놓은 것이므로
//  프로토콜이라고 할 수 있습니다.
//  또한 프레임워크와 함께 동작할 수 있는 Plugins 또는 Middleware 라고 하는 것들이 존재할 수 있는
//  이유는 프레임워크를 만든 개발자가 어떠한 프로토콜 규약을 만들고 소프트웨어를 확장할 수 있는 
//  아키텍처를 제공했기 때문입니다.

// # 그래서 애플리케이션을 개발함에 있어서 단지 어떤 기능을 개발하는 것뿐만 아니라,
//  구조적으로 볼륨이 큰 애플리케이션은 단지 코드의 양만 늘어난다고 볼륨이 커지는 것이
//  아니라, 코드의 양이 늘어나지만 코드의 복잡도는 적어져서 협업이 용이한 구조의 
//  아키텍처가 반드시 필요합니다. 그럴때 프로토콜이라고 하는 규격을 만들어놓고 
//  그 규격 안에서 함수든 클래스든 동작할 수 있는 모양을 만들어 갈 수 있게 하는
//  개발방식을 권장합니다.

